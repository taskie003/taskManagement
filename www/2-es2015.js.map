{"version":3,"sources":["./node_modules/@ionic-super-tabs/core/dist/esm/super-tab_3.entry.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6H;AACyD;;AAEtL;AACA;AACA,QAAQ,2DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,2DAAC;AAChB;AACA,cAAc,QAAQ,2DAAU,OAAO;AACvC,wBAAwB,eAAe,oCAAoC,kBAAkB,cAAc,kBAAkB,gBAAgB,mBAAmB,UAAU,oBAAoB,cAAc,oBAAoB,YAAY,mCAAmC,gCAAgC,wBAAwB,8BAA8B,sBAAsB,kBAAkB,SAAS,yBAAyB,2BAA2B,8BAA8B,0CAA0C,mCAAmC,gBAAgB,kBAAkB,oBAAoB,YAAY,gBAAgB,kBAAkB,wCAAwC,kBAAkB,EAAE;AACrtB;;AAEA;AACA;AACA;AACA,QAAQ,2DAAgB;AACxB;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,uBAAuB,oDAAc;AACrC;AACA;AACA;AACA,SAAS;AACT,yBAAyB,2DAAW;AACpC;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B;AACA;AACA;AACA,qDAAqD,EAAE,oDAAc;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B,8BAA8B,QAAQ;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,qCAAqC,kBAAkB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,4DAAQ;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB,2DAAC,CAAC,mDAAI,QAAQ,2DAAC,UAAU,cAAc,GAAG,2DAAC,gBAAgB,2DAAC,UAAU,iBAAiB;AACvG;AACA,cAAc,QAAQ,2DAAU,OAAO;AACvC,2BAA2B;AAC3B;AACA,MAAM;AACN,wBAAwB,eAAe,YAAY,gBAAgB,oBAAoB,aAAa,0BAA0B,sBAAsB,gBAAgB,UAAU,kBAAkB,0BAA0B,kBAAkB,SAAS,yBAAyB,sBAAsB,qBAAqB,iBAAiB,2BAA2B,8BAA8B,0CAA0C,mCAAmC,sBAAsB,kBAAkB,8BAA8B,sBAAsB,SAAS,UAAU,EAAE;AACjkB;;AAEA;AACA;AACA,QAAQ,2DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,2DAAW;AAC/C,sCAAsC,2DAAW;AACjD,qBAAqB,2DAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB,uBAAuB;AACvB;AACA;AACA,QAAQ,4DAAQ;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,4DAAQ;AAC5B;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,uBAAuB,4DAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,4DAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,4DAAY;AACnC;AACA,kCAAkC,4DAAY;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,4DAAU;AACrC,wBAAwB,4DAAoB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,4DAAY;AACnC,0BAA0B,4DAAK;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,4DAAU;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,4DAAQ;AAChB;AACA;AACA,eAAe,2DAAC;AAChB;AACA,cAAc,QAAQ,2DAAU,OAAO;AACvC,wBAAwB,eAAe,oBAAoB,aAAa,yBAAyB,qBAAqB,eAAe,kBAAkB,cAAc,kBAAkB,8BAA8B,sBAAsB,mCAAmC,oCAAoC,gBAAgB,gCAAgC,wBAAwB,uBAAuB,mBAAmB,sBAAsB,qBAAqB,iBAAiB,4BAA4B,kBAAkB,SAAS,yBAAyB,2BAA2B,8BAA8B,0CAA0C,mCAAmC,EAAE;AACxrB;;AAEiI","file":"2-es2015.js","sourcesContent":["import { r as registerInstance, h, g as getElement, c as createEvent, H as Host, d as getContext } from './core-4ed83284.js';\nimport { D as DEFAULT_CONFIG, d as debugLog, s as scrollEl, b as getTs, p as pointerCoord, c as checkGesture, g as getScrollX, a as getNormalizedScrollX } from './utils-5174e079.js';\n\nconst SuperTabComponent = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    componentDidLoad() {\n        this.checkIonContent();\n    }\n    componentDidUpdate() {\n        // check for ion-content after update, in case it was dynamically loaded\n        this.checkIonContent();\n    }\n    /**\n     * Check if we have an ion-content as a child and update the `noScroll` property\n     * if it's not set yet.\n     */\n    checkIonContent() {\n        if (typeof this.noScroll !== 'boolean') {\n            const ionContentEl = this.el.querySelector('ion-content');\n            if (ionContentEl && ionContentEl.parentElement === this.el) {\n                this.noScroll = true;\n            }\n        }\n    }\n    /**\n     * Returns the root scrollable element\n     */\n    async getRootScrollableEl() {\n        if (!this.noScroll && this.el.scrollHeight > this.el.clientHeight) {\n            return this.el;\n        }\n        const ionContent = this.el.querySelector('ion-content');\n        if (ionContent) {\n            return ionContent.getScrollElement();\n        }\n        if (this.noScroll) {\n            return null;\n        }\n        return this.el;\n    }\n    render() {\n        return h(\"slot\", null);\n    }\n    get el() { return getElement(this); }\n    static get style() { return \":host{height:var(--super-tab-height,100%);position:relative;display:block;overflow-x:hidden;overflow-y:auto;contain:size style;z-index:1;-ms-flex-negative:0;flex-shrink:0;-ms-flex-positive:0;flex-grow:0;width:var(--super-tab-width,100vw);-webkit-transform:translateZ(0);transform:translateZ(0);-webkit-box-sizing:border-box;box-sizing:border-box;-ms-flex-order:-1;order:-1;-webkit-user-select:none;-webkit-touch-callout:none;-webkit-text-size-adjust:none;-webkit-tap-highlight-color:rgba(0,0,0,0);-webkit-font-smoothing:antialiased}:host[noScroll]{overflow-y:hidden}ion-content,ion-nav{height:100%;max-height:100%;position:absolute}ion-content>.ion-page,ion-nav>.ion-page{position:absolute}\"; }\n};\n\nconst maxInitRetries = 1e3;\nconst SuperTabsComponent = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /**\n         * Initial active tab index.\n         * Defaults to `0`.\n         *\n         * @type {number}\n         */\n        this.activeTabIndex = 0;\n        this._config = DEFAULT_CONFIG;\n        this.initAttempts = 0;\n        this.initPromise = new Promise((resolve) => {\n            this.initPromiseResolve = resolve;\n        });\n        this.tabChange = createEvent(this, \"tabChange\", 7);\n    }\n    /**\n     * Set/update the configuration\n     * @param {SuperTabsConfig} config Configuration object\n     */\n    async setConfig(config) {\n        this.debug('setConfig called with: ', config);\n        this._config = Object.assign(Object.assign({}, DEFAULT_CONFIG), config);\n    }\n    propagateConfig() {\n        this.container && (this.container.config = this._config);\n        this.toolbar && (this.toolbar.config = this._config);\n    }\n    /**\n     * Set the selected tab.\n     * This will move the container and the toolbar to the selected tab.\n     * @param index {number} the index of the tab you want to select\n     * @param [animate=true] {boolean} whether you want to animate the transition\n     */\n    async selectTab(index, animate = true) {\n        this.debug('selectTab', index, animate);\n        await this.initPromise;\n        const lastIndex = this.activeTabIndex;\n        if (this.container) {\n            await this.container.setActiveTabIndex(index, true, animate);\n        }\n        if (this.toolbar) {\n            await this.toolbar.setActiveTab(index, true, animate);\n        }\n        this.emitTabChangeEvent(index, lastIndex);\n        this.activeTabIndex = lastIndex;\n    }\n    async onConfigChange(config) {\n        await this.setConfig(config);\n    }\n    onWindowResize() {\n        this.debug('onWindowResize');\n        this.toolbar && this.toolbar.setSelectedTab(this.activeTabIndex);\n        this.container.reindexTabs();\n    }\n    async componentWillLoad() {\n        this.debug('componentWillLoad');\n        if (this.config) {\n            await this.setConfig(this.config);\n        }\n    }\n    componentDidLoad() {\n        this.debug('componentDidLoad');\n        // index children\n        this.indexChildren();\n        // set the selected tab so the toolbar & container are aligned and in sync\n        if (this.container) {\n            this.container.setActiveTabIndex(this.activeTabIndex);\n        }\n        if (this.toolbar) {\n            this.toolbar.setActiveTab(this.activeTabIndex);\n        }\n        // listen to `slotchange` event to detect any changes in children\n        this.el.shadowRoot.addEventListener('slotchange', this.onSlotchange.bind(this));\n        requestAnimationFrame(() => {\n            this.initComponent();\n        });\n    }\n    initComponent() {\n        if (!this.container) {\n            if (++this.initAttempts < maxInitRetries) {\n                requestAnimationFrame(() => {\n                    this.initComponent();\n                });\n                return;\n            }\n        }\n        this.debug(`failed to init ${this.initAttempts} times`);\n        if (this.container) {\n            this.container.moveContainerByIndex(this.activeTabIndex, false);\n        }\n        if (this.toolbar) {\n            this.toolbar.setSelectedTab(this.activeTabIndex, false);\n        }\n        this.propagateConfig();\n        this.setupEventListeners();\n        this.initPromiseResolve();\n    }\n    /**\n     * Setup event listeners to synchronize child components\n     */\n    async setupEventListeners() {\n        if (this.container) {\n            await this.container.componentOnReady();\n            this.el.addEventListener('selectedTabIndexChange', this.onContainerSelectedTabChange.bind(this));\n            this.el.addEventListener('activeTabIndexChange', this.onContainerActiveTabChange.bind(this));\n        }\n        else {\n            this.debug('setupEventListeners: container does not exist');\n        }\n        if (this.toolbar) {\n            await this.toolbar.componentOnReady();\n            this.el.addEventListener('buttonClick', this.onToolbarButtonClick.bind(this));\n        }\n        else {\n            this.debug('setupEventListeners: toolbar does not exist');\n        }\n    }\n    async onContainerSelectedTabChange(ev) {\n        // this.debug('onContainerSelectedTabChange called with: ', ev);\n        if (this.toolbar) {\n            await this.toolbar.setSelectedTab(ev.detail);\n        }\n    }\n    emitTabChangeEvent(newIndex, oldIndex) {\n        if (typeof newIndex !== 'number' || newIndex < 0) {\n            return;\n        }\n        if (typeof oldIndex !== 'number' || oldIndex < 0) {\n            oldIndex = this.activeTabIndex;\n        }\n        this.tabChange.emit({\n            changed: newIndex !== oldIndex,\n            index: newIndex,\n        });\n    }\n    onContainerActiveTabChange(ev) {\n        this.debug('onContainerActiveTabChange', ev);\n        const index = ev.detail;\n        this.emitTabChangeEvent(index);\n        this.activeTabIndex = index;\n        this.toolbar && this.toolbar.setActiveTab(index, true, true);\n    }\n    onToolbarButtonClick(ev) {\n        this.debug('onToolbarButtonClick', ev);\n        const { index } = ev.detail;\n        this.container && this.container.setActiveTabIndex(index, true, true);\n        this.emitTabChangeEvent(index);\n        this.activeTabIndex = index;\n    }\n    indexChildren() {\n        this.debug('indexChildren');\n        const container = this.el.querySelector('super-tabs-container');\n        const toolbar = this.el.querySelector('super-tabs-toolbar');\n        if (container && this.container !== container) {\n            this.container = container;\n        }\n        if (toolbar && this.toolbar !== toolbar) {\n            this.toolbar = toolbar;\n        }\n        this.propagateConfig();\n    }\n    async onSlotchange() {\n        // re-index the child components\n        this.indexChildren();\n        // reselect the current tab to ensure that we're on the correct tab\n        this.selectTab(this.activeTabIndex);\n    }\n    /**\n     * Internal method to output values in debug mode.\n     */\n    debug(...vals) {\n        debugLog(this._config, 'tabs', vals);\n    }\n    render() {\n        // Render 3 slots\n        // Top & bottom slots allow the toolbar position to be configurable via slots.\n        // The nameless slot is used to hold the `super-tabs-container`.\n        return (h(Host, null, h(\"slot\", { name: \"top\" }), h(\"slot\", null), h(\"slot\", { name: \"bottom\" })));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"config\": [\"onConfigChange\"]\n    }; }\n    static get style() { return \":host{height:100%;max-height:100%;display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;overflow:hidden;z-index:1;position:relative;contain:layout size style;-ms-flex-order:-1;order:-1;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-touch-callout:none;-webkit-text-size-adjust:none;-webkit-tap-highlight-color:rgba(0,0,0,0);-webkit-font-smoothing:antialiased;-ms-touch-action:none;touch-action:none;-webkit-box-sizing:border-box;box-sizing:border-box;margin:0;padding:0}\"; }\n};\n\nconst SuperTabsContainerComponent = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /**\n         * Enable/disable swiping\n         */\n        this.swipeEnabled = true;\n        /**\n         * Set to true to automatically scroll to the top of the tab when the button is clicked while the tab is\n         * already selected.\n         */\n        this.autoScrollTop = false;\n        this.tabs = [];\n        this.isDragging = false;\n        this.leftThreshold = 0;\n        this.rightThreshold = 0;\n        this.scrollWidth = 0;\n        this.clientWidth = 0;\n        this.activeTabIndexChange = createEvent(this, \"activeTabIndexChange\", 7);\n        this.selectedTabIndexChange = createEvent(this, \"selectedTabIndexChange\", 7);\n        this.queue = getContext(this, \"queue\");\n    }\n    async componentDidLoad() {\n        this.debug('componentDidLoad');\n        await this.indexTabs();\n        this.slot = this.el.shadowRoot.querySelector('slot');\n        this.slot.addEventListener('slotchange', this.onSlotChange.bind(this));\n    }\n    async onSlotChange() {\n        this.debug('onSlotChange', this.tabs.length);\n    }\n    async componentWillUpdate() {\n        await this.indexTabs();\n    }\n    /**\n     * @internal\n     */\n    async reindexTabs() {\n        await this.indexTabs();\n    }\n    /**\n     * @internal\n     *\n     * Moves the container to align with the specified tab index\n     * @param index {number} Index of the tab\n     * @param animate {boolean} Whether to animate the transition\n     */\n    moveContainerByIndex(index, animate) {\n        const scrollX = this.indexToPosition(index);\n        if (scrollX === 0 && index > 0) {\n            return Promise.resolve();\n        }\n        return this.moveContainer(scrollX, animate);\n    }\n    /**\n     * @internal\n     *\n     * Sets the scrollLeft property of the container\n     * @param scrollX {number}\n     * @param animate {boolean}\n     */\n    moveContainer(scrollX, animate) {\n        scrollEl(this.el, scrollX, 0, animate ? this.config.transitionDuration : 0);\n        return Promise.resolve();\n    }\n    /** @internal */\n    async setActiveTabIndex(index, moveContainer = true, animate = true) {\n        this.debug('setActiveTabIndex', index);\n        if (this._activeTabIndex === index) {\n            if (!this.autoScrollTop) {\n                return;\n            }\n            await this.scrollToTop();\n        }\n        if (moveContainer) {\n            await this.moveContainerByIndex(index, animate);\n        }\n        await this.updateActiveTabIndex(index, false);\n    }\n    /**\n     * Scroll the active tab to the top.\n     */\n    async scrollToTop() {\n        if (this._activeTabIndex === undefined || this.tabs === undefined) {\n            this.debug('activeTabIndex or tabs was undefined');\n            return;\n        }\n        const current = this.tabs[this._activeTabIndex];\n        this.queue.read(() => {\n            if (!current) {\n                this.debug('Current active tab was undefined in scrollToTop');\n                return;\n            }\n            current.getRootScrollableEl()\n                .then(el => {\n                if (el) {\n                    scrollEl(el, 0, 0, this.config.transitionDuration);\n                }\n            });\n        });\n    }\n    updateActiveTabIndex(index, emit = true) {\n        this.debug('updateActiveTabIndex', index, emit, this._activeTabIndex);\n        this._activeTabIndex = index;\n        emit && this.activeTabIndexChange.emit(this._activeTabIndex);\n    }\n    updateSelectedTabIndex(index) {\n        if (index === this._selectedTabIndex) {\n            return;\n        }\n        this._selectedTabIndex = index;\n        this.selectedTabIndexChange.emit(this._selectedTabIndex);\n    }\n    async onTouchStart(ev) {\n        if (!this.swipeEnabled) {\n            return;\n        }\n        if (this.config.avoidElements) {\n            let avoid = false;\n            let element = ev.target;\n            if (element) {\n                do {\n                    if (typeof element.getAttribute === 'function' && element.getAttribute('avoid-super-tabs')) {\n                        return;\n                    }\n                    element = element.parentElement;\n                } while (element && !avoid);\n            }\n        }\n        const coords = pointerCoord(ev);\n        const vw = this.clientWidth;\n        if (coords.x < this.leftThreshold || coords.x > vw - this.rightThreshold) {\n            // ignore this gesture, it started in the side menu touch zone\n            return;\n        }\n        if (this.config.shortSwipeDuration > 0) {\n            this.initialTimestamp = getTs();\n        }\n        this.initialCoords = coords;\n        this.lastPosX = coords.x;\n    }\n    async onClick(ev) {\n        if (this.isDragging) {\n            ev.stopImmediatePropagation();\n            ev.preventDefault();\n        }\n    }\n    async onTouchMove(ev) {\n        if (!this.swipeEnabled || !this.initialCoords || typeof this.lastPosX !== 'number') {\n            return;\n        }\n        const coords = pointerCoord(ev);\n        if (!this.isDragging) {\n            const shouldCapture = checkGesture(coords, this.initialCoords, this.config);\n            if (!shouldCapture) {\n                if (Math.abs(coords.y - this.initialCoords.y) > 100) {\n                    this.initialCoords = void 0;\n                    this.lastPosX = void 0;\n                }\n                return;\n            }\n            // gesture is good, let's capture all next onTouchMove events\n            this.isDragging = true;\n        }\n        // scroll container\n        if (!this.isDragging) {\n            return;\n        }\n        // stop anything else from capturing these events, to make sure the content doesn't slide\n        if (!this.config.allowElementScroll) {\n            ev.stopImmediatePropagation();\n        }\n        // get delta X\n        const deltaX = this.lastPosX - coords.x;\n        if (deltaX === 0) {\n            return;\n        }\n        const scrollLeft = getScrollX(this.el);\n        const scrollX = getNormalizedScrollX(this.el, deltaX);\n        if (scrollX === scrollLeft) {\n            return;\n        }\n        this.updateSelectedTabIndex(this.positionToIndex(scrollX));\n        // update last X value\n        this.lastPosX = coords.x;\n        this.moveContainer(scrollX, false);\n    }\n    async onTouchEnd(ev) {\n        if (!this.swipeEnabled || !this.isDragging) {\n            return;\n        }\n        const coords = pointerCoord(ev);\n        const deltaTime = getTs() - this.initialTimestamp;\n        const shortSwipe = this.config.shortSwipeDuration > 0 && deltaTime <= this.config.shortSwipeDuration;\n        const shortSwipeDelta = coords.x - this.initialCoords.x;\n        let selectedTabIndex = this.calcSelectedTab();\n        const expectedTabIndex = Math.round(selectedTabIndex);\n        if (shortSwipe && expectedTabIndex === this._activeTabIndex) {\n            selectedTabIndex += shortSwipeDelta > 0 ? -1 : 1;\n        }\n        selectedTabIndex = this.normalizeSelectedTab(selectedTabIndex);\n        this.updateActiveTabIndex(selectedTabIndex);\n        this.moveContainerByIndex(selectedTabIndex, true);\n        this.isDragging = false;\n        this.initialCoords = void 0;\n        this.lastPosX = void 0;\n    }\n    async indexTabs() {\n        this.scrollWidth = this.el.scrollWidth;\n        this.clientWidth = this.el.clientWidth;\n        this.debug('indexTab', this.scrollWidth, this.clientWidth);\n        if (this.scrollWidth === 0 || this.clientWidth === 0) {\n            requestAnimationFrame(() => {\n                this.indexTabs();\n            });\n            return;\n        }\n        const tabs = Array.from(this.el.querySelectorAll('super-tab'));\n        await Promise.all(tabs.map(t => t.componentOnReady()));\n        this.tabs = tabs;\n        if (this.ready && typeof this._activeTabIndex === 'number') {\n            this.moveContainerByIndex(this._activeTabIndex, true);\n        }\n        if (this.config) {\n            switch (this.config.sideMenu) {\n                case 'both':\n                    this.rightThreshold = this.leftThreshold = this.config.sideMenuThreshold || 0;\n                    break;\n                case 'left':\n                    this.leftThreshold = this.config.sideMenuThreshold || 0;\n                    break;\n                case 'right':\n                    this.rightThreshold = this.config.sideMenuThreshold || 0;\n                    break;\n            }\n        }\n        if (this._activeTabIndex !== undefined) {\n            this.moveContainerByIndex(this._activeTabIndex, false)\n                .then(() => {\n                this.ready = true;\n            });\n        }\n    }\n    calcSelectedTab() {\n        const tabsWidth = this.scrollWidth;\n        const tabWidth = this.clientWidth;\n        const minX = 0;\n        const maxX = tabsWidth - tabWidth;\n        const scrollX = Math.max(minX, Math.min(maxX, getScrollX(this.el)));\n        return this.positionToIndex(scrollX);\n    }\n    positionToIndex(scrollX) {\n        const tabWidth = this.clientWidth;\n        return scrollX / tabWidth;\n    }\n    indexToPosition(tabIndex) {\n        this.debug('indexToPosition', tabIndex, this.clientWidth);\n        const tabWidth = this.clientWidth;\n        return tabIndex * tabWidth;\n    }\n    normalizeSelectedTab(index) {\n        const tabsWidth = this.scrollWidth;\n        const tabWidth = this.clientWidth;\n        const minX = 0;\n        const maxX = tabsWidth - tabWidth;\n        const scrollX = Math.max(minX, Math.min(maxX, tabWidth * Math.round(index)));\n        return scrollX / tabWidth;\n    }\n    /**\n     * Internal method to output values in debug mode.\n     */\n    debug(...vals) {\n        debugLog(this.config, 'container', vals);\n    }\n    render() {\n        return h(\"slot\", null);\n    }\n    get el() { return getElement(this); }\n    static get style() { return \":host{display:-ms-flexbox;display:flex;-ms-flex-flow:row nowrap;flex-flow:row nowrap;min-width:100%;-ms-flex:1 1 auto;flex:1 1 auto;position:relative;-webkit-box-sizing:border-box;box-sizing:border-box;width:var(--super-tab-width,100vw);height:var(--super-tab-height,100%);overflow:hidden;-webkit-transform:translateZ(0);transform:translateZ(0);-ms-touch-action:pan-y;touch-action:pan-y;-moz-user-select:none;-ms-user-select:none;user-select:none;will-change:scroll-position;-ms-flex-order:-1;order:-1;-webkit-user-select:none;-webkit-touch-callout:none;-webkit-text-size-adjust:none;-webkit-tap-highlight-color:rgba(0,0,0,0);-webkit-font-smoothing:antialiased}\"; }\n};\n\nexport { SuperTabComponent as super_tab, SuperTabsComponent as super_tabs, SuperTabsContainerComponent as super_tabs_container };\n"],"sourceRoot":"webpack:///"}